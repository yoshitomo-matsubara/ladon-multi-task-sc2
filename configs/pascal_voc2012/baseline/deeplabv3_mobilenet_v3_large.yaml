datasets:
  &pascal_train 'pascal_voc2012/train': &pascal_train_dataset !import_call
    _name: &dataset_name 'pascal_voc2012'
    _root: &root_dir '~/datasets'
    key: 'torchvision.datasets.VOCSegmentation'
    init:
      kwargs:
        root: *root_dir
        image_set: 'train'
        year: '2012'
        download: True
        transforms: !import_call
          key: 'custom.transform.CustomCompose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'custom.transform.CustomRandomResize'
                  init:
                    kwargs:
                      min_size: 256
                      max_size: 832
                - !import_call
                  key: 'custom.transform.CustomRandomHorizontalFlip'
                  init:
                    kwargs:
                      p: 0.5
                - !import_call
                  key: 'custom.transform.CustomRandomCrop'
                  init:
                    kwargs:
                      size: 416
                - !import_call
                  key: 'custom.transform.CustomToTensor'
                  init:
                - !import_call
                  key: 'custom.transform.CustomNormalize'
                  init:
                    kwargs: &normalize_kwargs
                      mean: [0.485, 0.456, 0.406]
                      std: [0.229, 0.224, 0.225]
  &pascal_val 'pascal_voc2012/val': !import_call
    key: 'torchvision.datasets.VOCSegmentation'
    init:
      kwargs:
        root: *root_dir
        image_set: 'val'
        year: '2012'
        download: True
        transforms: !import_call
          key: 'custom.transform.CustomCompose'
          init:
            kwargs:
              transforms:
                - !import_call
                  key: 'custom.transform.CustomRandomResize'
                  init:
                    kwargs:
                      min_size: 416
                      max_size: 416
                - !import_call
                  key: 'sc2bench.transforms.misc.CustomToTensor'
                  init:
                    kwargs:
                      converts_sample: True
                      converts_target: True
                - !import_call
                  key: 'custom.transform.CustomNormalize'
                  init:
                    kwargs: *normalize_kwargs

models:
  model:
    key: 'deeplabv3_mobilenet_v3_large'
    kwargs:
      pretrained: True
      num_classes: 21
      aux_loss: True
    experiment: &student_experiment !join [*dataset_name, '-deeplabv3_mobilenet_v3_large']
    src_ckpt:
    dst_ckpt: !join ['./resource/ckpt/pascal_voc2012/baseline/', *student_experiment, '.pt']

train:
  log_freq: 1000
  num_epochs: &num_epochs 60
  train_data_loader:
    dataset_id: *pascal_train
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.RandomSampler'
      kwargs:
    collate_fn: 'pascal_seg_collate_fn'
    kwargs:
      batch_size: &train_batch_size 16
      num_workers: 8
    cache_output:
  val_data_loader:
    dataset_id: *pascal_val
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.SequentialSampler'
      kwargs:
    collate_fn: 'pascal_seg_eval_collate_fn'
    kwargs:
      batch_size: 1
      num_workers: 8
  model:
    adaptations:
    sequential: []
    frozen_modules: ['backbone']
    forward_proc: 'forward_batch_only'
    forward_hook:
      input: []
      output: []
    wrapper: 'DistributedDataParallel'
    requires_grad: True
  optimizer:
    key: 'SGD'
    kwargs:
      lr: 0.02
      momentum: 0.9
      weight_decay: 0.0001
    module_wise_kwargs:
      - module: 'backbone'
        kwargs: {}
      - module: 'classifier'
        kwargs: {}
      - module: 'aux_classifier'
        kwargs:
          lr: 0.2
  scheduler:
    key: 'poly_lr_scheduler'
    kwargs:
      num_iterations: !import_call
        key: 'utils.dataset.get_num_iterations'
        init:
          kwargs:
            dataset: *pascal_train_dataset
            batch_size: *train_batch_size
            world_size: 1
      num_epochs: *num_epochs
      power: 0.9
    scheduling_step: 1
  criterion:
    key: 'WeightedSumLoss'
    kwargs:
      sub_terms:
        ce:
          criterion:
            key: 'CrossEntropyLoss'
            kwargs:
              reduction: 'mean'
              ignore_index: 255
          criterion_wrapper:
            key: 'DictLossWrapper'
            kwargs:
              input:
                is_from_teacher: False
                module_path: '.'
                io: 'output'
              target:
                uses_label: True
              weights:
                out: 1.0
                aux: 0.5
          weight: 1.0

test:
  test_data_loader:
    dataset_id: *pascal_val
    sampler:
      class_or_func: !import_get
        key: 'torch.utils.data.SequentialSampler'
      kwargs:
    collate_fn: 'pascal_seg_eval_collate_fn'
    kwargs:
      batch_size: 1
      num_workers: 8
